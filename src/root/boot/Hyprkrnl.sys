--Copyright (C) 2025  Starlight-CC
--Hyprkrnl
local _VG = _G
local keptAPIs = {assert = true, collectgarbage = true, gcinfo = true, getfenv = true, getmetatable = true, ipairs = true, load = true, loadstring = true, math = true, newproxy = true, next = true, pairs = true, pcall = true, rawequal = true, rawget = true, rawlen = true, rawset = true, select = true, setfenv = true, setmetatable = true, string = true, table = true, tonumber = true, tostring = true, type = true, unpack = true, xpcall = true, colors = true, colours = true, keys = true}
local t = {}
for k in pairs(_VG) do if not keptAPIs[k] then table.insert(t, k) end end
for _,k in ipairs(t) do _VG[k] = nil end
t = nil
local kernel = {}
kernel.hypervisor = {}
local hypervisor={}
hypervisor.stack={}
local currentProcess = {name="Kernel",path="/boot/Hyprkrnl.sys",thread=0}
--Vurtual ENV
local function createVurtualENV(dummyEnv,Env)
    local VPEnv = setmetatable(dummyEnv,{
        __index=function(tbl, key)
        local v = Env[key]
        if v ~= nil and type(v)=="table" then
            return setmetatable({}, {__index=v})
        end
        return v
    end
    })
    return VPEnv
end
local PIDidx = 1
function kernel.hypervisor.addProcess(func,name)
    local info = debug.getinfo(func)
    local thread = coroutine.create(func)
    hypervisor.stack[tostring(PIDidx)]={name=name,path=info.short_src,thread=thread,env=debug.getfenv(func)}
    PIDidx = PIDidx + 1
end

