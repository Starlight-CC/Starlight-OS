--Copyright (C) 2025  Starlight-CC
--Hyprkrnl
local _VG = _G
local keptAPIs = {assert = true, collectgarbage = true, gcinfo = true, getfenv = true, getmetatable = true, ipairs = true, load = true, loadstring = true, math = true, newproxy = true, next = true, pairs = true, pcall = true, rawequal = true, rawget = true, rawlen = true, rawset = true, select = true, setfenv = true, setmetatable = true, string = true, table = true, tonumber = true, tostring = true, type = true, unpack = true, xpcall = true, colors = true, colours = true, keys = true}
local t = {}
for k in pairs(_VG) do if not keptAPIs[k] then table.insert(t, k) end end
for _,k in ipairs(t) do _VG[k] = nil end
t = nil
local driverRuntimes = {}
local _VG.syscall = {}
local function requireGlobal(_namespace)
    return _G[_namespace]
end
local function editENV(_namespace,_data)
    _VG[tostring(_namespace)]=_data
end
local function addSyscall(_namespace,_data)
    _VG.syscall[tostring(_namespace)]=_data
end
local function addTask(_namespace,_function)
    driverRuntimes[tostring(_namespace)]=_function
end
local function PANIC(ERR)
    term.clear()
    term.setCursorPos(1,1)
    term.write(ERR)
end
--Vurtual ENV
local function createVurtualENV(dummyEnv,Env)
    local VPEnv = setmetatable(dummyEnv,{
        __index=function(tbl, key)
        local v = Env[key]
        if v ~= nil and type(v)=="table" then
            return setmetatable({}, {__index=v})
        end
        return v
    end
    })
    return VPEnv
end
-- Vurtual Driver ENV
local VDEnv = createVurtualENV({
    requireGlobal,
    editENV,
    addSyscall,
    addTask,
    PANIC
},_VG)
