--Copyright (C) 2025  Starlight-CC
--Hyprkrnl
local _VG = _G
local keptAPIs = {assert = true, collectgarbage = true, gcinfo = true, getfenv = true, getmetatable = true, ipairs = true, load = true, loadstring = true, math = true, newproxy = true, next = true, pairs = true, pcall = true, rawequal = true, rawget = true, rawlen = true, rawset = true, select = true, setfenv = true, setmetatable = true, string = true, table = true, tonumber = true, tostring = true, type = true, unpack = true, xpcall = true, colors = true, colours = true, keys = true, error = true}
local t = {}
for k in pairs(_VG) do if not keptAPIs[k] then table.insert(t, k) end end
for _,k in ipairs(t) do _VG[k] = nil end
t = nil
local kernel = os
kernel.queueEventRaw = kernel.queueEvent
kernel.hypervisor = {}
local hypervisor={}
hypervisor.stack={}
local currentProcess = {name="Kernel",path="/boot/Hyprkrnl.sys",thread=0}
--Vurtual ENV
local function createVurtualENV(dummyEnv,Env)
    local VPEnv = setmetatable(dummyEnv,{
        __index=function(tbl, key)
        local v = Env[key]
        if v ~= nil and type(v)=="table" then
            return setmetatable({}, {__index=v})
        end
        return v
    end
    })
    return VPEnv
end

function kernel.pullEventRaw(_sFilter)
    return coroutine.yield(_sFilter)
end

function kernel.pullEvent(_sFilter)
    local eventData = table.pack(kernel.pullEventRaw(_sFilter))
    if eventData[1] == "terminate" then
        error("Terminated", 0)
    end
    return table.unpack(eventData, 1, eventData.n)
end

function kernel.queueEvent(...)
    kernel.queueEventRaw(...)
    return ...
end

local function loadfile(path,_mode,_env,_namespace)
    if not type(_env) == "table" then
        _env = createVurtualENV({},_VG)
    else
        _env = createVurtualENV(_env,_VG)
    end
    if not _namespace then
        _namespace = "@/"..fs.combine(path)
    end
    if type(_mode) == "table" and _env == nil then
        _mode, _env = nil, _mode
    end
    local file = fs.open(path, "r")
    if not file then
        return nil, "File not found"
    end
    local func, err = load(file.readAll(),_namespace,_mode,_env)
    return func, err
end

local function dofile(path,_env,...)
    if _tEnv == nil then
        _tEnv = _G
    end
    local fnFile, e = loadfile(_sFile, nil, _G)
    if fnFile then
        return fnFile(...)
    else
        error(e, 2)
    end
end

local PIDidx = 1
function kernel.hypervisor.addProcess(func,name)
    local info = debug.getinfo(func)
    local thread = coroutine.create(func)
    local env = debug.getfenv(func)
    hypervisor.stack[tostring(PIDidx)]={
        name=name,
        path=info.short_src,
        thread=thread,
        environ=env,
        owner=env.me.myExec(),
        root=env.me.myRoot(),
        status="suspended",
        tasks={}
    }
    PIDidx = PIDidx + 1
end

function hypervisor.kill(processID)
    hypervisor.stack[tostring(processID)]=nil
end


