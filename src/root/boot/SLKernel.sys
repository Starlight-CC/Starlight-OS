local internal = {}
internal._G = _G
_G = {}
internal.knownENV="Unknown"
if internal._G._CC_DEFAULT_SETTINGS then
    internal.knownENV="CC:Tweaked"
    if internal._G.term.setGraphicsMode then
        internal.knownENV="CraftOS-PC"
    end
end
if internal.knownENV ~= "CraftOS-PC" then
    internal._G.error("This OS is made for CraftOS-PC. ENV="..internal.knownENV)
end
local Ks = "Start"  
internal._LuaBuiltins = {
    "pairs",
    "ipairs",
    "load",
    "xpcall",
    "gcinfo",
    "pcall",
    "tostring",
    "tonumber",
    "type",
    "collectgarbage",
    "unpack",
    "rawget",
    "rawset",
    "rawequal",
    "next",
    "newproxy",
    "getmetatable",
    "setmetatable",
    "getfenv",
    "error",
    "assert",
    "coroutine",
    "_VERSION"
}
for i in internal._LuaBuiltins do
    _G[i]=internal._G[i]
end
local fs = internal._G.fs
internal.static={}
local function refreshGloabalEnv()
    for i,v in pairs(internal.static) do
        _G[i]=internal.static[i]
    end
end
if fs.exists("/var/log/kernel.log") then
    if fs.exists("/var/log/kernel.log.old") then
        fs.delete("/var/log/kernel.log.old")
    end
    fs.move("/var/log/kernel.log","/var/log/kernel.log.old")
end
local LogFile = fs.open("/var/log/kernel.log",w)
local function log(s,l,p)
    if p = nil then
        p = "SLK"
    end
    LogFile.write(internal._G.os.date()..":"..p.."|"..s.."\n")
    if l then
        LogFile.flush()
    end
end
local function panic(s)
    LogFile.close()
    file = fs.open("/var/log/kernel.log")
    print(file.readAll())
    error(s,0)
end
local kernel={}
kernel.internal={}
function kernel.log(String,Save)
    --$$$ get the prog
    log(String,Save,"prog")
end
kernel.loadfile=function(_sFile,_tEnv)
    local file=fs.open(_sFile,"r")
    if file then
        local func, err = load(file.readAll(),fs.getName(_sFile),"t",_tEnv)
        file.close()
        return func, err
    end
    return nil, "File not found"
end
kernel.dofile=function(_sFile,args)
    local fnFile,e=loadfile(_sFile,_G)
    if fnFile then
        return fnFile(args)
    else
        error(e,2)
    end
end
function kernel.pullEventRaw(sFilter)
    return coroutine.yield(sFilter)
end
function kernel.pullEvent(sFilter)
    local eventData = table.pack(kernel.pullEventRaw(sFilter))
    if eventData[1] == "terminate" then
        error("Terminated",0)
    end
    return table.unpack(eventData,1,eventData.n)
end
local nativeShutdown = kernel.shutdown
function kernel.shutdown()
    nativeShutdown()
    while true do
        coroutine.yield()
    end
end
local nativeReboot = kernel.reboot
function kernel.reboot()
    nativeReboot()
    while true do
        coroutine.yield()
    end
end
function kernel.internal.loadGlobalAPI(Filepath,args)
    local l,n=dofile(Filepath,args)
    if Ks == "Load" then
        if n = nil then
            log("ERR getting lib name canceling.")
        elseif n = "Global" then
            for i,v in pairs(l) do
                _G[i]=v
                internal.static[i]=v
                log("Loaded \""..i.."\" into global ENV.")
            end
        else
            _G[n]=l
            internal.static[n]=l
            log("Loaded lib \""..n.."\" into global ENV.")
        end
    else
        log("Tried to load lib \""..n.."\" but kernel in state \""..Ks.."\".")
    end
end
Ks = "Load"
local tmp=fs.list("/lib/kernel/")
for _,v in ipairs(tmp) do
    if not fs.isDir(v) then
        kernel.internal.loadGlobalAPI(v,internal._G)
    else
        log("Directory found, Skipping.")
    end
end
Ks = "Running"
internal.static.kernel = kernel
local function FG()--OS (Shell or Desktop)
    local process = conf.get("Kernel_startup_process")
    if process == nil then
        conf.set("Kernel_startup_process","/sys/Eshell.sys")
        local process = "/sys/Eshell.sys"
    end
    process = loadfile(process,_G)
    process()
end
local function BG()--kernel
    while true do
        refreshGloabalEnv()
        coroutine.yield()
    end
end
thread.splitAny(FG,BG)
_G.internal = internal
local process = loadfile("/sys/Eshell.sys",_G)
process("Fatal startup process or kernel ERR")
panic("Fatal Kernel ERR")