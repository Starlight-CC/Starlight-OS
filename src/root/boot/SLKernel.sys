local internal = {}
internal._G = _G
_G = {}
internal.knownENV="Unknown"
if internal._G._CC_DEFAULT_SETTINGS then
    internal.knownENV="CC:Tweaked"
    if internal._G.term.setGraphicsMode then
        internal.knownENV="CraftOS-PC"
    end
end
if internal.knownENV ~= "CraftOS-PC" then
    internal._G.error("This OS is made for CraftOS-PC. ENV="..internal.knownENV)
end
local Ks = "Start"  
internal._LuaBuiltins = {
    "pairs",
    "ipairs",
    "load",
    "xpcall",
    "gcinfo",
    "pcall",
    "tostring",
    "tonumber",
    "type",
    "collectgarbage",
    "unpack",
    "rawget",
    "rawset",
    "rawequal",
    "next",
    "newproxy",
    "getmetatable",
    "setmetatable",
    "getfenv",
    "error",
    "assert",
    "coroutine",
    "_VERSION"
}
ipairs = internal._G.ipairs
internal.static={}
for _,i in ipairs(internal._LuaBuiltins) do
    _G[i]=internal._G[i]
    internal.static[i]=internal._G[i]
end
local fs = internal._G.fs
local function refreshGloabalEnv()
    for i,v in pairs(internal.static) do
        _G[i]=v
    end
end
if fs.exists("/var/log/kernel.log") then
    if fs.exists("/var/log/kernel.log.old") then
        fs.delete("/var/log/kernel.log.old")
    end
    fs.move("/var/log/kernel.log","/var/log/kernel.log.old")
end
local LogFile = fs.open("/var/log/kernel.log","w")
local function log(s,l,p)
    if p == nil then
        p = "SLK"
    end
    LogFile.write(internal._G.os.date()..":"..p.."|"..s.."\n")
    if l then
        LogFile.flush()
    end
end
local function panic(s)
    LogFile.close()
    file = fs.open("/var/log/kernel.log")
    print(file.readAll())
    error(s,0)
end
local kernel={}
kernel.internal={}
function kernel.log(String,Save)
    --$$$ get the prog
    log(String,Save,"prog")
end
kernel.loadfile=function(_sFile,_tEnv)
    local file=fs.open(_sFile,"r")
    if file then
        local func, err = load(file.readAll(),fs.getName(_sFile),"t",_tEnv)
        file.close()
        return func, err
    end
    return nil, "File not found"
end
kernel.dofile=function(_sFile,_tEnv,args)
    local fnFile,e=loadfile(_sFile,_tEnv)
    if fnFile then
        return fnFile(args)
    else
        error(e,2)
    end
end
function kernel.pullEventRaw(sFilter)
    return coroutine.yield(sFilter)
end
function kernel.pullEvent(sFilter)
    local eventData = table.pack(kernel.pullEventRaw(sFilter))
    if eventData[1] == "terminate" then
        error("Terminated",0)
    end
    return table.unpack(eventData,1,eventData.n)
end
local nativeShutdown = internal._G.os.shutdown
function kernel.shutdown()
    nativeShutdown()
    while true do
        coroutine.yield()
    end
end
local nativeReboot = internal._G.os.reboot
function kernel.reboot()
    nativeReboot()
    while true do
        coroutine.yield()
    end
end
function kernel.internal.loadGlobalAPI(Filepath,_tEnv,args)
    if Ks == "Load" then
        local s,l,n = kernel.dofile(Filepath,_tEnv,args)
        if s == false then
            log(l,true)
        else
            if n == "global" then
                for i,v in pairs(l) do
                    _G[tostring(i)]=v
                    internal._G[tostring(i)]=v
                    log("Loaded \""..tostring(i).."\" into global ENV")
                end
            else
                _G[tostring(n)]=l
                internal._G[tostring(n)]=l
                log("Loaded lib \""..tostring(n).."\" into global ENV")
            end
        end
    end
end
kernel.util={}
function kernel.util.isin(v,t)
    for i,_ in pairs(t) do
        if v == i then
            return true
        end
    end
    return false
end
function kernel.requestStaticGlobal(k,n,v)
    if kernel.util.isin(k,internal.keys) then
        if internal.keys[k]["type"] == "global" or "kernel" then
            internal.static[n]=v
            return {
                tSet=function(ns,nv) 
                    if type(internal.static[n]) == "table" then
                        internal.static[n][ns]=v
                    end
                end,
                set=function(v) 
                    if type(internal.static[n]) ~= "table" then
                        internal.static[n] = v
                    end
                end,
                type=function()
                    return type(internal.static[n])
                end,
                name=function() 
                    return n
                end,
                tRemove=function(ns)
                    if type(internal.static[n]) == "table" then
                        internal.static[n][ns]=nil
                    end
                end,
                close=function() 
                    internal.static[n]=nil
                end
            }
        end
    end
end

function kernel.requestInternalApi(k,a)
    if kernel.util.isin(k,internal.keys) then
        if internal.keys[k]["type"] == "api" or "kernel" then
            return internal._G[a]
        end
    end
end
function kernel.run(_tEnv,_sPath,...)
    local tArgs = internal._G.table.pack( ... )
    local tEnv = _tEnv
    setmetatable( tEnv, { __index = _G } )
    local fnFile, err = kernel.loadfile( _sPath, tEnv )
    if fnFile then
        local ok, err = pcall( function()
            fnFile( table.unpack( tArgs, 1, tArgs.n ) )
        end )
        if not ok then
            if err and err ~= "" then
                internal._G.printError( err )
            end
            return false
        end
        return true
    end
    if err and err ~= "" then
        internal._G.printError( err )
    end
    return false
end
internal.static.kernel = kernel
_G.kernel = kernel
refreshGloabalEnv()
Ks = "Load"
local tmp=fs.list("/lib/kernel/")
for _,v in ipairs(tmp) do
    if not fs.isDir(v) then
        kernel.internal.loadGlobalAPI("/lib/kernel/"..v,internal._G,_G)
    else
        log("Directory found, Skipping.")
    end
end
Ks = "Running"
internal.static.kernel = kernel
local function FG()--OS (Shell or Desktop)
    local process = conf.get("Kernel.settings","Startup_process")
    if process == nil then
        conf.set("Kernel.settings","Startup_process","/sys/Term.sys")
        local process = "/sys/Term.sys"
    end
    process = loadfile(process,_G)
    process()
end
local Ci = 0
local Cis = conf.get("Kernel.settings","Log_sav_interval")
if Cis == nil then
    Cis = 256
end
local function BG()--kernel
    while true do
        refreshGloabalEnv()
        if Cis ~= 0 then
            if Ci == Cis then
                Ci = 0
                log("Saved Log",true)
            end
            Ci = Ci + 1
        end
        coroutine.yield()
    end
end
thread.splitAny(FG,BG)
_G.internal = internal
local process = loadfile("/sys/Term.sys",_G)
process("Fatal startup process or kernel ERR")
panic("Fatal Kernel ERR")