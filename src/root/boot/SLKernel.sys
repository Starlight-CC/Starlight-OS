local internal = _G
_G = {}
local knownENV = "unknown"
if internal._CC_DEFAULT_SETTINGS then
    knownENV = "CC: Tweaked"
    if internal.term.setGraphicsMode then
        knownENV = "CraftOS"
    end
end

if knownENV ~= "CraftOS" then
    error("This OS is for CraftOS-PC, we plan to make more compatability in the future. Detected ENV: "..knownENV)
end

local function isin(is,vs,t)
    for i,v in pairs(t) do
        if v == vs or i = is then
            return true
        end
    end
    return false
end

local _GExeptions = {
    "sleep",
    "write",
    "print",
    "printError",
    "read"
}
for i,v in pairs(internal) do
    if type(v) == "function" then
        if not isin(_,i,_GExeptions) then
            _G[tostring(i)] = v
        end
    end
end
kernel = {}
kernel.syscall = {}
function kernel.syscall.pullEventRaw( sFilter )
    return coroutine.yield( sFilter )
end

function kernel.syscall.pullEvent( sFilter )
    local eventData = table.pack( kernel.syscall.pullEventRaw( sFilter ) )
    if eventData[1] == "terminate" then
        error( "Terminated", 0 )
    end
    return table.unpack( eventData, 1, eventData.n )
end

function kernel.syscall.queueEvent(s)
    internal.os.queueEvent(s)
end

local nativeShutdown = internal.os.shutdown
function kernel.syscall.shutdown()
    save()
    nativeShutdown()
    while true do
        coroutine.yield()
    end
end

local nativeReboot = internal.os.reboot
function kernel.syscall.reboot()
    save()
    nativeReboot()
    while true do
        coroutine.yield()
    end
end

kernel.coroutine = internal.coroutine

-- Install globals and add some sneaky ways to terminate/control the process

local function panic(err)
    write(VMem)
    printError()
    error("Kernel panic: "..tostring(err),0)
end

kernel.loadfile = function( _sFile, _tEnv )
    if type( _sFile ) ~= "string" then
        error( "bad argument #1 (expected string, got " .. type( _sFile ) .. ")", 2 ) 
    end
    if _tEnv ~= nil and type( _tEnv ) ~= "table" then
        error( "bad argument #2 (expected table, got " .. type( _tEnv ) .. ")", 2 ) 
    end
    local file = internal.fs.open( _sFile, "r" )
    if file then
        local func, err = load( file.readAll(), internal.fs.getName( _sFile ), "t", _tEnv )
        file.close()
        return func, err
    end
    return nil, "File not found"
end

kernel.dofile = function( _sFile )
    if type( _sFile ) ~= "string" then
        error( "bad argument #1 (expected string, got " .. type( _sFile ) .. ")", 2 ) 
    end
    local fnFile, e = loadfile( _sFile, _G )
    if fnFile then
        return fnFile()
    else
        error( e, 2 )
    end
end

local _GE
local _TG = {}
function kernel.syscall.setStaticGloabal(g)
    if not isin(g,_,_TG)
        _TG[g] = _G[g]
    end
end
_G.dofile = kernel.dofile
_G.loadfile = kernel.loadfile
kernel.exports = kernel.loadfile("/boot/sys/exports.sys")(internal)
local expect = kernel.dofile("/sys/modules/expect.la")
for i,v in pairs(kernel.exports) do
    _G[i] = v
    kernel.syscall.setStaticGloabal(i)
end
kernel.syscall.setStaticGloabal("kernel")

while true do
    for i,v in pairs(_TG) do
        _G[i] = v
    end
    kernel.staticGloabals = _TG
    break
end

