kernel={}
local function isin(q,t,m)
    if m == nil then
        local m = 1
    end
    for i,v in pairs(t) do
        if m == 1 then
            if i == q then
                return true
            end
        elseif m == 2 then
            if v == q then
                return true
            end
        else
            error("invalid mode")
        end
    end
    return false
end
function loadfile(_env,_sPath,_args)
        -- Support the previous `loadfile(filename, env)` form instead.
    if type(mode) == "table" and env == nil then
        mode, env = nil, mode
    end

    expect(1, filename, "string")
    expect(2, mode, "string", "nil")
    expect(3, env, "table", "nil")

    local file = fs.open(filename, "r")
    if not file then return nil, "File not found" end

    local func, err = load(file.readAll(), "@/" .. fs.combine(filename), mode, env)
    file.close()
    return func, err
end
function dofile(_sFile,_args)
    expect(1, _sFile, "string")

    local fnFile, e = loadfile(_sFile, nil, _G)
    if fnFile then
        return fnFile(_args)
    else
        error(e, 2)
    end
end
local function loadAPI(_sPath)
    local list,name=dofile(_sPath)
    if name=="global" then
        for i,v in pairs(list) do
            _G[i]=v
        end
    else
        _G[name]=list
    end
end
local function loadAPIs(_sFolder)
    local targets=fs.list(_sFolder)
    for i in targets do
        loadAPI(i)

function kernel.run(_tEnv, _sPath, ...)
    local tEnv = _tEnv
    setmetatable(tEnv, { __index = _G })

    if conf.get("kernel.strict_globals", false) then
        tEnv._ENV = tEnv
        getmetatable(tEnv).__newindex = function(_, name)
          error("Attempt to create global " .. tostring(name), 2)
        end
    end

    local fnFile, err = loadfile(_sPath, nil, tEnv)
    if fnFile then
        local ok, err = pcall(fnFile, ...)
        if not ok then
            if err and err ~= "" then
                printError(err)
            end
            return false
        end
        return true
    end
    if err and err ~= "" then
        printError(err)
    end
    return false
end
kernel.run(runtime,"/Test.lua")
