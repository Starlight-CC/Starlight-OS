theme = {}
lib = {}
theme.main = colors.cyan
theme.sec = colors.purple

local function tokenise(...)
    local line = table.concat({ ... }, " ")
    local words = {}
    local quoted = false
    for match in string.gmatch(line .. "\"", "(.-)\"") do
        if quoted then
            table.insert(words, match)
        else
            for m in string.gmatch(match, "[^ \t]+") do
                table.insert(words, m)
            end
        end
        quoted = not quoted
    end
    return words
end

function shell.run(...)
    local tArgs = tokenise(...)
    kernel.addProcessWithArgs(tArgs[1],table.unpack(tArgs,2))
end
tArgs = nil
tArgs = {...}
if #tArgs > 0 then
    
else
    term.clear()
    term.setCursorPos(1,1)
    term.setTextColor(theme.sec)
    print([[SShell Copyright (C) 2025  Starlight-CC
for details type 'show c'.
    ]])
    function printHead()
        term.setTextColor(theme.main)
        term.write(os.username().."@"..os.hostname()..":"..shell.dir().."$ ")
        term.setTextColor(colors.white)
        term.setCursorBlink(true)
    end

    local tCommandHistory = {}
    while not Exit do
        printHead()

        local ok, result
        local co = coroutine.create(read)
        assert(coroutine.resume(co, nil, tCommandHistory, complete))

        while coroutine.status(co) ~= "dead" do
            local event = table.pack(os.pullEvent())
            if event[1] == "file_transfer" then
                local _, h = term.getSize()
                local _, y = term.getCursorPos()
                if y == h then
                    term.scroll(1)
                    term.setCursorPos(1, y)
                else
                    term.setCursorPos(1, y + 1)
                end
                term.setCursorBlink(false)

                local ok, err = require("internal.import")(event[2].getFiles())
                if not ok and err then printError(err) end

                printHead()
                term.setCursorBlink(true)
                event = { "term_resize", n = 1 }
            end

            if result == nil or event[1] == result or event[1] == "terminate" then
                ok, result = coroutine.resume(co, table.unpack(event, 1, event.n))
                if not ok then error(result, 0) end
            end
        end

        if result:match("%S") and tCommandHistory[#tCommandHistory] ~= result then
            table.insert(tCommandHistory, result)
        end
        shell.run(result)
    end
end
sleep(2)