theme = {}
theme.main = colors.cyan
theme.sec = colors.purple

shell = {} -- api
local aliases = {} -- alias table
local sDir = "/" -- Working dir
local make_package = dofile("sys/modules/require.la").make -- custom require
local require -- Set up a dummy require
do
    local env = setmetatable(createShellEnv(shell.cmdDir()), { __index = _ENV })
    require = env.require
end
expect = require "cc.expect"
local commands = require("shellCMD") -- Shell commands

function os.username() return "root" end
function os.hostname() return "cc" end
function shell.dir() return sDir end

local function tokenise(...) -- convert arg string to table
    local line = table.concat({ ... }, " ")
    local words = {}
    local quoted = false
    for match in string.gmatch(line .. "\"", "(.-)\"") do
        if quoted then
            table.insert(words, match)
        else
            for m in string.gmatch(match, "[^ \t]+") do
                table.insert(words, m)
            end
        end
        quoted = not quoted
    end
    return words
end

function shell.exec(c,...) -- run a command
    local tArgs = tokenise(...)
    if commands.find(c,commands.exec) then
        print(tostring(c))
        local cmd = commands.exec[tostring(c)]
        cmd(table.unpack(tArgs))
    elseif fs.exists(c) then
        local cmd = loadfile(tostring(c))
        pcall(cmd(table.unpack(tArgs)))
    else
        term.setTextColor(colors.red)
        print("No command or file found")
    end
end

function shell.run(...)
    local tArgs = tokenise(...)
    shell.exec(tArgs[1],table.unpack(tArgs,2))
end

function shell.exit() -- guess "hint: check the name"
    Exit = true
end

function shell.resolve(path) -- path handling
    expect(1, path, "string")
    local sStartChar = string.sub(path, 1, 1)
    if sStartChar == "/" or sStartChar == "\\" then
        return fs.combine("/", path)
    else
        return fs.combine(sDir, path)
    end
end

tArgs = nil
tArgs = {...}
if #tArgs > 0 then
    
else
    term.clear()
    term.setCursorPos(1,1)
    term.setTextColor(theme.sec)
    print([[SShell Copyright (C) 2025  Starlight-CC
for details type 'man c'.
    ]])
    function printHead()
        term.setTextColor(theme.main)
        term.write(os.username().."@"..os.hostname()..":"..shell.dir().."$ ")
        term.setTextColor(colors.white)
        term.setCursorBlink(true)
    end

    local tCommandHistory = {}
    while not Exit do
        printHead()

        local ok, result
        local co = coroutine.create(read)
        assert(coroutine.resume(co, nil, tCommandHistory, complete))

        while coroutine.status(co) ~= "dead" do
            local event = table.pack(os.pullEvent())
            if event[1] == "file_transfer" then
                local _, h = term.getSize()
                local _, y = term.getCursorPos()
                if y == h then
                    term.scroll(1)
                    term.setCursorPos(1, y)
                else
                    term.setCursorPos(1, y + 1)
                end
                term.setCursorBlink(false)

                local ok, err = require("internal.import")(event[2].getFiles())
                if not ok and err then printError(err) end

                printHead()
                term.setCursorBlink(true)
                event = { "term_resize", n = 1 }
            end

            if result == nil or event[1] == result or event[1] == "terminate" then
                ok, result = coroutine.resume(co, table.unpack(event, 1, event.n))
                if not ok then error(result, 0) end
            end
        end

        if result:match("%S") and tCommandHistory[#tCommandHistory] ~= result then
            table.insert(tCommandHistory, result)
        end
        shell.run(result)
    end
end
